version: "3.7"
volumes:
  postgres:
  redis:
networks:
  secateur:
services:
  app:
    build: .
    image: secateur
    env_file:
      - /etc/secateur/environment
    environment:
      - PGAPPNAME=app
      - OTEL_SERVICE_NAME=app
    command: >
      sh -c "./manage.py migrate &&
      gunicorn -b 0.0.0.0:5000 -k gevent --log-file=- --log-level info
      --access-logfile - --capture-output secateur.wsgi"
    ports:
      - "5000:5000"
    depends_on:
      - redis
      - postgres
    networks:
      secateur:
    init: true
    read_only: true
    tmpfs:
      - /tmp
    restart: always
    logging:
      driver: journald
    labels:
     - traefik.http.routers.secateur.rule=Host(`secateur.app`)
     - traefik.http.routers.secateur.middlewares=test-ratelimit
     - "traefik.http.middlewares.test-ratelimit.ratelimit.average=60"
     - "traefik.http.middlewares.test-ratelimit.ratelimit.burst=120"
     - "traefik.http.middlewares.test-ratelimit.ratelimit.period=1m"
     - traefik.http.routers.secateur.tls=true
     - traefik.http.routers.secateur.tls.certresolver=myresolver
     - traefik.enable=true
  beat:
    build: .
    image: secateur
    env_file:
      - /etc/secateur/environment
    environment:
      - DJANGO_SETTINGS_MODULE=secateur.settings
      - PGAPPNAME=beat
#      - C_REMDEBUG=True
      - OTEL_SERVICE_NAME=beat
    command: >
      celery -A secateur beat -l DEBUG
      --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - redis
      - postgres
    networks:
      secateur:
    init: true
    read_only: true
    tmpfs:
      - /tmp
    restart: always
    logging:
      driver: journald
  celery:
    build: .
    image: secateur
    env_file:
      - /etc/secateur/environment
    environment:
      - DJANGO_SETTINGS_MODULE=secateur.settings
      - PGAPPNAME=celery
      - OTEL_SERVICE_NAME=celery

    command: >
      celery -A secateur worker -l info
      --pool gevent
      --concurrency 20
    depends_on:
      - redis
      - postgres
    networks:
      secateur:
    init: true
    read_only: true
    tmpfs:
      - /tmp
    restart: always
    logging:
      driver: journald
  blocker:
    build: .
    image: secateur
    env_file:
      - /etc/secateur/environment
    environment:
      - DJANGO_SETTINGS_MODULE=secateur.settings
      - PGAPPNAME=blocker
      - OTEL_SERVICE_NAME=blocker
    command: >
      celery -A secateur worker -Q blocker -l info
      --pool gevent
      --concurrency 40
    depends_on:
      - redis
      - postgres
    networks:
      secateur:
    init: true
    read_only: true
    tmpfs:
      - /tmp
    restart: always
    logging:
      driver: journald
  postgres:
    image: postgres:14
    command: >
      postgres
      -c 'shared_buffers=256MB'
      -c 'synchronous_commit=off'
      -c "max_wal_senders=0"
      -c "wal_level=minimal"
      -c 'wal_writer_delay=5000'
      -c 'wal_writer_flush_after=5MB'
      -c 'log_min_duration_statement=1000'
      -c 'autovacuum_vacuum_scale_factor=0.01'
      -c 'bgwriter_lru_maxpages=2000'
      -c 'bgwriter_delay=1000ms'
      -c 'bgwriter_flush_after=2MB'
      -c 'bgwriter_lru_multiplier=4.0'
      -c 'idle_in_transaction_session_timeout=300s'
      -c 'log_autovacuum_min_duration=0'
    env_file:
      - /etc/secateur/environment
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      secateur:
    init: true
    read_only: true
    shm_size: 128M
    tmpfs:
      - /run/
      - /tmp/
    restart: always
    logging:
      driver: journald
    ports:
      - "127.0.0.1:5433:5432"
  redis:
    image: redis:6
    volumes:
      - redis:/data
    networks:
      secateur:
    init: true
    read_only: true
    restart: always
    command: redis-server redis.conf
    logging:
      driver: journald
  otel:
    image: amazon/aws-otel-collector
    env_file:
      - /etc/secateur/aws-otel-collector
    networks:
      secateur:
    read_only: true
    init: true
    restart: always
    logging:
      driver: journald
