version: "3.7"
volumes:
  postgres:
  redis:
networks:
  secateur:
services:
  app:
    build: .
    image: secateur
    env_file:
      - .env
    environment:
      - DEBUG=True
    command: sh -c "./manage.py migrate && ./manage.py runserver 0.0.0.0:5000"
    ports:
      - "5000:5000"
    depends_on:
      - redis
      - postgres
    networks:
      secateur:
    volumes:
      - .:/app:cached
    init: true
  celery:
    build: .
    image: secateur
    env_file:
      - ./.env
    environment:
      - DJANGO_SETTINGS_MODULE=secateur.settings
    #command: watchmedo auto-restart --recursive --pattern="*.py" --directory="." -- celery -A secateur worker -l info
    command: celery -A secateur worker --queues celery,blocker --loglevel debug --pool gevent
    depends_on:
      - redis
      - postgres
    networks:
      secateur:
    volumes:
      - .:/app:cached
    init: true
    read_only: true
#  tests:
#    build: .
#    image: secateur
#    env_file:
#      - ./.env
#    environment:
#      - DJANGO_SETTINGS_MODULE=secateur.settings
#    command: watchmedo auto-restart --recursive --pattern="*.py" --directory="." -- pytest --cov-report=term-missing:skip-covered --cov=secateur
#    depends_on:
#      - redis
#      - postgres
#    networks:
#      secateur:
#    volumes:
#      - .:/app:cached
#    init: true
#    read_only: true
  postgres:
    image: postgres:13
    env_file:
      - ./.env
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      secateur:
    init: true
    read_only: true
    tmpfs:
      - /run/
      - /tmp/
    environment:
      # This is NEVER OKAY in a production setup. But it's a reasonable compromise for a contained postgres on a dev machine, I supppppose
      - POSTGRES_HOST_AUTH_METHOD=trust
  redis:
    image: redis
    volumes:
      - redis:/data
    networks:
      secateur:
    init: true
    read_only: true
